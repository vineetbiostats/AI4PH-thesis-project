{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyMBYMz3V9+vNZRi/lX9YG57",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/vineetbiostats/AI4PH-thesis-project/blob/main/AI4PH\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd   \n",
        "import numpy as np    \n",
        "import matplotlib.pyplot as plt \n",
        "import seaborn as sns\n",
        "SEED = 101"
      ],
      "metadata": {
        "id": "xhr563U4Vgbr"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\"https://raw.githubusercontent.com/vineetbiostats/AI4PH-thesis-project/main/mldata.csv\",sep=\",\",error_bad_lines=False)\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "T2KVwbztZNLL",
        "outputId": "2795363d-5474-473e-8dd8-eac18e21549c"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-16adf017-0f4c-4396-a06b-6d107eda5209\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>seqn</th>\n",
              "      <th>obesity</th>\n",
              "      <th>gender</th>\n",
              "      <th>race</th>\n",
              "      <th>birthplace</th>\n",
              "      <th>hhsize1</th>\n",
              "      <th>noofc5ory</th>\n",
              "      <th>noofc6to17</th>\n",
              "      <th>hhedu1</th>\n",
              "      <th>hrmar1</th>\n",
              "      <th>hhinc1</th>\n",
              "      <th>mothage_born</th>\n",
              "      <th>mothsmok_born</th>\n",
              "      <th>weight_born1</th>\n",
              "      <th>svar</th>\n",
              "      <th>hhedu2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>83738</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>83739</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>83743</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>83745</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>4.0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>83746</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-16adf017-0f4c-4396-a06b-6d107eda5209')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-16adf017-0f4c-4396-a06b-6d107eda5209 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-16adf017-0f4c-4396-a06b-6d107eda5209');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "    seqn  obesity  gender  race  ...  mothsmok_born  weight_born1  svar  hhedu2\n",
              "0  83738        0       2     1  ...              1             0     1       1\n",
              "1  83739        0       1     3  ...              0             0     1       5\n",
              "2  83743        1       1     5  ...              0             0     1       5\n",
              "3  83745        1       2     3  ...              1             0     1       4\n",
              "4  83746        0       2     5  ...              0             0     1       5\n",
              "\n",
              "[5 rows x 16 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 2. General description of the dataset.\n",
        "print ('Rows     : ', df.shape[0])\n",
        "print ('Coloumns  : ', df.shape[1])\n",
        "print ('\\nFeatures : \\n', df.columns.tolist())\n",
        "print ('\\nNumber of Missing values:  ', df.isnull().sum().values.sum())\n",
        "print ('\\nNumber of unique values :  \\n', df.nunique())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bgJZsN0SmMtG",
        "outputId": "c0ca0444-9a6f-4861-fd88-5fd8167c7a9d"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Rows     :  3340\n",
            "Coloumns  :  16\n",
            "\n",
            "Features : \n",
            " ['seqn', 'obesity', 'gender', 'race', 'birthplace', 'hhsize1', 'noofc5ory', 'noofc6to17', 'hhedu1', 'hrmar1', 'hhinc1', 'mothage_born', 'mothsmok_born', 'weight_born1', 'svar', 'hhedu2']\n",
            "\n",
            "Number of Missing values:   119\n",
            "\n",
            "Number of unique values :  \n",
            " seqn             3340\n",
            "obesity             2\n",
            "gender              2\n",
            "race                5\n",
            "birthplace          2\n",
            "hhsize1             5\n",
            "noofc5ory           4\n",
            "noofc6to17          5\n",
            "hhedu1              5\n",
            "hrmar1              4\n",
            "hhinc1              4\n",
            "mothage_born        3\n",
            "mothsmok_born       2\n",
            "weight_born1        2\n",
            "svar                2\n",
            "hhedu2              3\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "##number of missing values in each variable(feature)\n",
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r_YYH-QGmSUe",
        "outputId": "3629fcac-787d-4486-aef5-b149abb8a39d"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "seqn               0\n",
              "obesity            0\n",
              "gender             0\n",
              "race               0\n",
              "birthplace         0\n",
              "hhsize1            0\n",
              "noofc5ory          0\n",
              "noofc6to17         0\n",
              "hhedu1           119\n",
              "hrmar1             0\n",
              "hhinc1             0\n",
              "mothage_born       0\n",
              "mothsmok_born      0\n",
              "weight_born1       0\n",
              "svar               0\n",
              "hhedu2             0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df1 = pd.DataFrame(df, columns = ['gender', 'race', 'birthplace', 'hhsize1', 'noofc5ory', 'noofc6to17', 'hrmar1', 'hhinc1', 'hhedu2', 'mothage_born', 'mothsmok_born', 'weight_born1', 'obesity'])\n",
        "df1.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "0j3_0v1Ipz_9",
        "outputId": "204e330c-bcfe-44f6-bafa-09fd0c270623"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-188ace63-8174-4532-8de4-909f08b2b8d3\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>gender</th>\n",
              "      <th>race</th>\n",
              "      <th>birthplace</th>\n",
              "      <th>hhsize1</th>\n",
              "      <th>noofc5ory</th>\n",
              "      <th>noofc6to17</th>\n",
              "      <th>hrmar1</th>\n",
              "      <th>hhinc1</th>\n",
              "      <th>hhedu2</th>\n",
              "      <th>mothage_born</th>\n",
              "      <th>mothsmok_born</th>\n",
              "      <th>weight_born1</th>\n",
              "      <th>obesity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-188ace63-8174-4532-8de4-909f08b2b8d3')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-188ace63-8174-4532-8de4-909f08b2b8d3 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-188ace63-8174-4532-8de4-909f08b2b8d3');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "   gender  race  birthplace  ...  mothsmok_born  weight_born1  obesity\n",
              "0       2     1           1  ...              1             0        0\n",
              "1       1     3           1  ...              0             0        0\n",
              "2       1     5           1  ...              0             0        1\n",
              "3       2     3           1  ...              1             0        1\n",
              "4       2     5           2  ...              0             0        0\n",
              "\n",
              "[5 rows x 13 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#procedure for pie chart\n",
        "proportion = df1['obesity'].value_counts() / df1.obesity.count()\n",
        "print (proportion)\n",
        "label = ['obesity', 'normal']\n",
        "\n",
        "plt.pie(proportion,labels = label,autopct='%1.1f%%')\n",
        "\n",
        "plt.title('obesity proportion')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 316
        },
        "id": "rS5JWAwvqDtp",
        "outputId": "17204e36-e96a-49cd-b94d-9b9ce87a6ce1"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0    0.636826\n",
            "1    0.363174\n",
            "Name: obesity, dtype: float64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Split the data set into input features, X, and targe feature, y\n",
        "X, y = df1.drop('obesity', axis=1), df1['obesity']\n",
        "print(X.shape, y.shape)\n",
        "\n",
        "# type(X)   # pandas.core.frame.DataFrame\n",
        "# type(y)   # pandas.core.series.Series"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZwNFxRHWqa9R",
        "outputId": "3ecac236-088f-4c18-c9d5-fdd08ace409d"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(3340, 12) (3340,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Feature scaling\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "std = StandardScaler()\n",
        "std.fit(X.values)\n",
        "X_scaled = std.transform(X.values)\n",
        "print('X_scaled', X_scaled.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ko1WEbQ9qkyk",
        "outputId": "28e5c19b-58a8-40de-e515-966435763b3d"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X_scaled (3340, 12)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import MinMaxScaler  \n",
        "scaler = MinMaxScaler(feature_range = (0,1))\n",
        "scaler.fit(X)\n",
        "X_man_mix = scaler.transform(X)\n",
        "print('X_man_mix', X_man_mix.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p-6fZwRoqoKR",
        "outputId": "cae55511-58bc-48d3-b90c-f7ac73aaa885"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X_man_mix (3340, 12)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        " #split data to 80:20 ratio for train/test\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=.2, random_state=SEED, stratify=y)\n",
        "print('X_train', X_train.shape)\n",
        "print('y_train', y_train.shape)\n",
        "print('X_test', X_test.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a-v_A3ijqtJ5",
        "outputId": "9704e212-226f-4185-ee9b-8016081d85c5"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X_train (2672, 12)\n",
            "y_train (2672,)\n",
            "X_test (668, 12)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import svm\n",
        "clf = svm.SVC() # We declare the estimator with its hyperparameters\n",
        "clf.fit(X_train, y_train) #We call the estimator to learn the parameters from the training dataset\n",
        "y_pred = clf.predict(X_test)"
      ],
      "metadata": {
        "id": "ZPxl_kSRq8T_"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "clf.kernel #hyperparameters\n",
        "clf.support_ #learned parameters"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CT3bn2fnrDhp",
        "outputId": "7d4017ad-9471-464a-b92d-20f4bf602d58"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([   1,    2,    5, ..., 2665, 2670, 2671], dtype=int32)"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Model evaluation\n",
        "# in training data\n",
        "\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from sklearn.metrics import plot_confusion_matrix\n",
        "\n",
        "\n",
        "y_pred = clf.predict(X_train)\n",
        "\n",
        "cf_matrix = confusion_matrix(y_train, y_pred)\n",
        "\n",
        "print(cf_matrix)\n",
        "\n",
        "plot_confusion_matrix(clf, X_train, y_train, cmap='Blues')  \n",
        "\n",
        "plot_confusion_matrix(clf, X_train, y_train, cmap='Blues', normalize = 'all')  "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 682
        },
        "id": "cHqZ0Sj9rL7d",
        "outputId": "3c53810e-2f7b-40a1-fcb2-f73b54ad64be"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1653   49]\n",
            " [ 833  137]]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
            "  warnings.warn(msg, category=FutureWarning)\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7efca4e97d10>"
            ]
          },
          "metadata": {},
          "execution_count": 29
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# in test data\n",
        "\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from sklearn.metrics import plot_confusion_matrix\n",
        "\n",
        "\n",
        "y_pred = clf.predict(X_test)\n",
        "\n",
        "cf_matrix = confusion_matrix(y_test, y_pred)\n",
        "\n",
        "print(cf_matrix)\n",
        "\n",
        "plot_confusion_matrix(clf, X_test, y_test, cmap='Blues')  \n",
        "\n",
        "plot_confusion_matrix(clf, X_test, y_test, cmap='Blues', normalize = 'all')  "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 682
        },
        "id": "GE6c2galrVfL",
        "outputId": "1105e140-b7ae-424a-f6a5-cf15db29ded4"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[411  14]\n",
            " [215  28]]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
            "  warnings.warn(msg, category=FutureWarning)\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7efca47b0f90>"
            ]
          },
          "metadata": {},
          "execution_count": 30
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#Quality measures\n",
        "from sklearn.metrics import accuracy_score\n",
        "accuracy_score(y_test, y_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CEfJtrBzrdEO",
        "outputId": "ceef9006-4ab7-4e34-b196-3165c51aed86"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.657185628742515"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import f1_score\n",
        "f1_score(y_test, y_pred, average='weighted')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wlVFSiIFrmNn",
        "outputId": "0eadd98e-fbe6-49ee-88bd-3ad92e5a271e"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5690794683855785"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        " from sklearn.metrics import precision_score\n",
        " precision_score(y_test, y_pred, average='weighted')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4Co2AWg6rrJ5",
        "outputId": "65f9524f-4861-4eb9-d91e-8da63053856d"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.6602298597692794"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import metrics\n",
        "fpr, tpr, thresholds = metrics.roc_curve(y_test, y_pred)\n",
        "print(fpr)\n",
        "print(tpr)\n",
        "print(thresholds)\n",
        "metrics.plot_roc_curve(clf, X_test, y_test)  \n",
        "plt.show()  "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 386
        },
        "id": "KupBTPnNrxyu",
        "outputId": "a8018a38-f105-4f06-d68c-0858fcd9d268"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.         0.03294118 1.        ]\n",
            "[0.         0.11522634 1.        ]\n",
            "[2 1 0]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_roc_curve is deprecated; Function :func:`plot_roc_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: :meth:`sklearn.metric.RocCurveDisplay.from_predictions` or :meth:`sklearn.metric.RocCurveDisplay.from_estimator`.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "auc_scoreauc_score = metrics.roc_auc_score(y_test, y_pred, average='weighted')\n",
        "print(auc_scoreauc_score)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QZ60gRjkr-Dq",
        "outputId": "93905018-f413-44a3-858c-c37737b9cfdc"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.5411425804889857\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Improving the model : Tunning the hyper-parameters\n",
        "clf_poly = svm.SVC(kernel = 'poly', C = 1, degree = 3, class_weight = 'balanced') # We declare the estimator with its hyperparameters\n",
        "clf_poly.fit(X_train, y_train) #We call the estimator to learn the parameters from the training dataset\n",
        "y_pred = clf_poly.predict(X_test)\n",
        "auc_score = metrics.roc_auc_score(y_test, y_pred, average='weighted')\n",
        "f1_score = metrics.f1_score(y_test, y_pred, average='weighted')"
      ],
      "metadata": {
        "id": "24vGKo__sL9m"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "f1_score"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1eFgQyBOs1LD",
        "outputId": "372b462c-ba48-452f-9d06-f431f0bf36b5"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5929832589435585"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "auc_score"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n6NfaWAnsQSh",
        "outputId": "e14ff2dd-7115-47a5-998e-5c0b087da3b3"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.585122246429436"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Random forest model\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "rnd_clf = RandomForestClassifier(n_estimators=10, max_leaf_nodes=16, n_jobs=-1)\n",
        "rnd_clf.fit(X_train, y_train)\n",
        "y_pred_rf = rnd_clf.predict(X_test)\n",
        "print(rnd_clf, accuracy_score(y_test, y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L6xUySedtKse",
        "outputId": "131d9421-ff06-4764-ae02-464118ec29f8"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RandomForestClassifier(max_leaf_nodes=16, n_estimators=10, n_jobs=-1) 0.6437125748502994\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from sklearn.metrics import plot_confusion_matrix\n",
        "\n",
        "\n",
        "y_pred = rnd_clf.predict(X_test)\n",
        "\n",
        "rnd_cf_matrix = confusion_matrix(y_test, y_pred)\n",
        "\n",
        "print(rnd_cf_matrix)\n",
        "\n",
        "plot_confusion_matrix(rnd_clf, X_test, y_test, cmap='Blues')  \n",
        "\n",
        "plot_confusion_matrix(rnd_clf, X_test, y_test, cmap='Blues', normalize = 'all')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 682
        },
        "id": "bV9A_qRPtS0H",
        "outputId": "23b43a83-59aa-4524-d5ca-4d65d9bf9650"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[416   9]\n",
            " [229  14]]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
            "  warnings.warn(msg, category=FutureWarning)\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7efca2959f50>"
            ]
          },
          "metadata": {},
          "execution_count": 43
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import f1_score\n",
        "f1_score(y_test, y_pred, average='weighted')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FImbGqVRtasY",
        "outputId": "1fb08a0e-d510-4c0c-e980-9501b40ee08b"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5330033489342024"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        " from sklearn.metrics import precision_score\n",
        " precision_score(y_test, y_pred, average='weighted')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y2fzYdRUtf04",
        "outputId": "97de52e5-bc00-47c7-d8b4-91613ccedc53"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.6317688182785087"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "auc_scoreauc_score = metrics.roc_auc_score(y_test, y_pred, average='weighted')\n",
        "print(auc_scoreauc_score)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0_RtzpIMuO-5",
        "outputId": "c4f38a88-5779-46ec-ebff-a5042fafddb3"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.5182183490680223\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "forest_importances = pd.Series(rnd_clf.feature_importances_,index=[\"gender\", \"race\", \"birthplace\", \"hhsize1\", \"noofc5ory\", \"noofc6to17\", \"hrmar1\", \"hhinc1\", \"hhedu2\", \"mothage_born\", \"mothsmok_born\", \"weight_born1\",])\n",
        "forest_importances.sort_values(ascending=False,inplace=True)\n",
        "forest_importances"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z2A9r_ehuR5i",
        "outputId": "4bd73221-4e9d-4b4f-b0e9-d48d872e3e18"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "race             0.188021\n",
              "hhedu2           0.119939\n",
              "hhinc1           0.118846\n",
              "noofc5ory        0.109065\n",
              "hhsize1          0.101156\n",
              "mothage_born     0.084476\n",
              "birthplace       0.081543\n",
              "noofc6to17       0.067929\n",
              "hrmar1           0.053816\n",
              "weight_born1     0.036505\n",
              "mothsmok_born    0.032086\n",
              "gender           0.006618\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "forest_importances.plot.bar()\n",
        "ax.set_title(\"Feature importances\")\n",
        "ax.set_ylabel(\"Mean decrease in impurity\")\n",
        "fig.tight_layout()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "BAxCV2RNvE93",
        "outputId": "d822a942-3121-4900-81f3-ac61562a0bc0"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ""
      ],
      "metadata": {
        "id": "_b8qFfJipzls"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Ada boost classifier\n",
        "#bagging\n",
        "from sklearn.ensemble import BaggingClassifier \n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "bag_clf = BaggingClassifier(\n",
        "        DecisionTreeClassifier(), n_estimators=500,\n",
        "        max_samples=100, bootstrap=True, n_jobs=-1)\n",
        "bag_clf.fit(X_train, y_train)\n",
        "y_pred = bag_clf.predict(X_test)\n"
      ],
      "metadata": {
        "id": "_8LhqvNmvqk2"
      },
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import AdaBoostClassifier\n",
        "ada_clf = AdaBoostClassifier(\n",
        "DecisionTreeClassifier(max_depth=3), n_estimators=200,\n",
        "algorithm=\"SAMME.R\", learning_rate=0.5, random_state=0)\n",
        "ada_clf.fit(X_train, y_train)\n",
        "y_pred = ada_clf.predict(X_test)\n",
        "print(ada_clf, accuracy_score(y_test, y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zPFIrbm8v19R",
        "outputId": "b3bf3fc4-3cf1-4910-9f60-5d91ddcd5bb2"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AdaBoostClassifier(base_estimator=DecisionTreeClassifier(max_depth=3),\n",
            "                   learning_rate=0.5, n_estimators=200, random_state=0) 0.6392215568862275\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "from sklearn.metrics import plot_confusion_matrix\n",
        "\n",
        "\n",
        "y_pred = ada_clf.predict(X_test)\n",
        "\n",
        "ada_cf_matrix = confusion_matrix(y_test, y_pred)\n",
        "\n",
        "print(ada_cf_matrix)\n",
        "\n",
        "plot_confusion_matrix(ada_clf, X_test, y_test, cmap='Blues')  \n",
        "\n",
        "plot_confusion_matrix(ada_clf, X_test, y_test, cmap='Blues', normalize = 'all')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 685
        },
        "id": "hhL9Jn6nv44v",
        "outputId": "1939f2a0-1f13-4b27-e839-bf6bb6005f3b"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[337  88]\n",
            " [153  90]]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
            "  warnings.warn(msg, category=FutureWarning)\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7efca2959b50>"
            ]
          },
          "metadata": {},
          "execution_count": 55
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import f1_score\n",
        "f1_score(y_test, y_pred, average='weighted')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Tu-ES3JVv8lD",
        "outputId": "b9dfc746-1a2a-48d9-f016-f9266f996278"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.6241850242896475"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        " from sklearn.metrics import precision_score\n",
        " precision_score(y_test, y_pred, average='weighted')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HHQxggV2wGjc",
        "outputId": "ecd73d81-5d24-4620-d94b-162894bba667"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.6214986330938215"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "auc_scoreauc_score = metrics.roc_auc_score(y_test, y_pred, average='weighted')\n",
        "print(auc_scoreauc_score)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0IqIWEfHwTvM",
        "outputId": "4ff787bd-d8fe-46b4-f37b-044d16dc52de"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.5816557734204794\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ada_importances = pd.Series(ada_clf.feature_importances_,index=[\"gender\", \"race\", \"birthplace\", \"hhsize1\", \"noofc5ory\", \"noofc6to17\", \"hrmar1\", \"hhinc1\", \"hhedu2\", \"mothage_born\", \"mothsmok_born\", \"weight_born1\"])\n",
        "ada_importances.sort_values(ascending=False,inplace=True)\n",
        "ada_importances"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x1GKeQGcwZeb",
        "outputId": "cb6b1ddb-de71-47b4-c8d6-c88d73e90c3c"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "race             0.135323\n",
              "hhsize1          0.131040\n",
              "hrmar1           0.119497\n",
              "hhinc1           0.117366\n",
              "noofc6to17       0.103722\n",
              "noofc5ory        0.093833\n",
              "mothage_born     0.072294\n",
              "hhedu2           0.068832\n",
              "mothsmok_born    0.049803\n",
              "gender           0.048534\n",
              "weight_born1     0.032715\n",
              "birthplace       0.027040\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "ada_importances.plot.bar()\n",
        "ax.set_title(\"Feature importances\")\n",
        "ax.set_ylabel(\"Mean decrease in impurity\")\n",
        "fig.tight_layout()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "mWQxewnMwnUb",
        "outputId": "57604851-7cae-489d-8667-07c113f833c7"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}